[questions]
subtemplate_warning.question = Please commit your changes, before using a sub-template! Continue anyway? [n/y]
subtemplate_warning.required = True
subtemplate_warning.default = n
subtemplate_warning.pre_ask_question = bobtemplates.plone.base:git_clean_state_check
subtemplate_warning.post_ask_question = mrbob.hooks:validate_choices bobtemplates.plone.base:subtemplate_warning_post_question
subtemplate_warning.choices = y|n
subtemplate_warning.choices_delimiter = |

dexterity_type_name.question = Content type name (Allowed: _ a-z A-Z and whitespace)
dexterity_type_name.help = Should be something like 'Todo Task', avoid something like this 'TODOTask'
dexterity_type_name.required = True
dexterity_type_name.default = Todo Task
dexterity_type_name.pre_ask_question = bobtemplates.plone.base:check_root_folder
dexterity_type_name.post_ask_question = bobtemplates.plone.content_type:check_dexterity_type_name

dexterity_type_desc.question = Content type description
dexterity_type_desc.help = Describe your content type in a view words.
dexterity_type_desc.required = False
dexterity_type_desc.default =

dexterity_type_supermodel.question = Use XML Model
dexterity_type_supermodel.help = Use plone.supermodel, if not we will use zope.schema.
dexterity_type_supermodel.required = True
dexterity_type_supermodel.default = n
dexterity_type_supermodel.post_ask_question = mrbob.hooks:validate_choices mrbob.hooks:to_boolean
dexterity_type_supermodel.choices = y|n
dexterity_type_supermodel.choices_delimiter = |

dexterity_type_base_class.question = Dexterity base class (Container/Item)
dexterity_type_base_class.help = Container for folderish content types or Item for non folderish content types.
dexterity_type_base_class.required = True
dexterity_type_base_class.default = Container
dexterity_type_base_class.post_ask_question = mrbob.hooks:validate_choices
dexterity_type_base_class.choices = Container|Item
dexterity_type_base_class.choices_delimiter = |
dexterity_type_base_class.choices_case_sensitive = yes

dexterity_type_global_allow.question = Should the content type globally addable?
dexterity_type_global_allow.help = If no, the content type is only addable inside containers which allow adding this ct.
dexterity_type_global_allow.required = True
dexterity_type_global_allow.default = y
dexterity_type_global_allow.post_ask_question = mrbob.hooks:validate_choices mrbob.hooks:to_boolean
dexterity_type_global_allow.choices = y|n
dexterity_type_global_allow.choices_delimiter = |

dexterity_parent_container_type_name.question = Parent container portal_type name
dexterity_parent_container_type_name.help = Name of the parent container portal_type, to allow adding this content type. Can also be empty.
dexterity_parent_container_type_name.pre_ask_question = bobtemplates.plone.content_type:check_global_allow

dexterity_type_filter_content_types.question = Should we filter content types to be added to this container?
dexterity_type_filter_content_types.help = If yes, only content type's which are in the list of allowed_content_types are addable.
dexterity_type_filter_content_types.required = True
dexterity_type_filter_content_types.default = n
dexterity_type_filter_content_types.pre_ask_question = bobtemplates.plone.content_type:is_container
dexterity_type_filter_content_types.post_ask_question = mrbob.hooks:validate_choices mrbob.hooks:to_boolean
dexterity_type_filter_content_types.choices = y|n
dexterity_type_filter_content_types.choices_delimiter = |

dexterity_type_create_class.question = Create a content type class
dexterity_type_create_class.help = If not we will use the generic Dexterity Item class.
dexterity_type_create_class.required = True
dexterity_type_create_class.default = y
dexterity_type_create_class.pre_ask_question = bobtemplates.plone.content_type:supermodel_is_used
dexterity_type_create_class.post_ask_question = mrbob.hooks:validate_choices mrbob.hooks:to_boolean
dexterity_type_create_class.choices = y|n
dexterity_type_create_class.choices_delimiter = |

dexterity_type_activate_default_behaviors.question = Activate default behaviors?
dexterity_type_activate_default_behaviors.help = If not we will just include them deactivated.
dexterity_type_activate_default_behaviors.required = True
dexterity_type_activate_default_behaviors.default = y
dexterity_type_activate_default_behaviors.post_ask_question = mrbob.hooks:validate_choices mrbob.hooks:to_boolean
dexterity_type_activate_default_behaviors.choices = y|n
dexterity_type_activate_default_behaviors.choices_delimiter = |

view_python_class.question = Should the view have a Python class?
view_python_class.help = Do you want Python class for this view?
view_python_class.required = True
view_python_class.default = y
view_python_class.pre_ask_question = bobtemplates.plone.base:check_root_folder
view_python_class.post_ask_question = mrbob.hooks:validate_choices mrbob.hooks:to_boolean
view_python_class.choices = y|n
view_python_class.choices_delimiter = |

view_python_class_name.question = Python class name
view_python_class_name.help = Shold be something like 'MyView'
view_python_class_name.required = False
view_python_class_name.default = MyView
view_python_class_name.pre_ask_question = bobtemplates.plone.view:check_python_class_answer

view_base_class.question = Which base class should the view use (BrowserView/DefaultView/CollectionView)?
view_base_class.help = You can choose a simple BrowserView or one of Dexterity DefaultView, CollectionView?
view_base_class.required = True
view_base_class.default = BrowserView
view_base_class.pre_ask_question = bobtemplates.plone.view:check_python_class_answer
view_base_class.post_ask_question = mrbob.hooks:validate_choices
view_base_class.choices = BrowserView|DefaultView|CollectionView
view_base_class.choices_delimiter = |

view_name.question = View name (part of the URL)
view_name.help = Should be something like 'my-view' (no special characters!)
view_name.required = True
view_name.default = my-view
view_name.pre_ask_question = bobtemplates.plone.view:get_view_name_from_python_class

view_template.question = Should the View have a template file?
view_template.help = Do you want a template file for this view?
view_template.required = True
view_template.default = y
view_template.post_ask_question = mrbob.hooks:validate_choices mrbob.hooks:to_boolean
view_template.choices = y|n
view_template.choices_delimiter = |

view_template_name.question = Template name (without extension)
view_template_name.help = name of the template file for this view
view_template_name.default = my_view
view_template_name.required = False
view_template_name.pre_ask_question = bobtemplates.plone.view:check_view_template_answer bobtemplates.plone.view:get_view_template_name_from_python_class

view_register_for.question = For which Content Type or Interface should we register the view (*/Document/Folder/Collection/Event/News Item]?
view_register_for.help = You can choose one Content Type, an interface or put * if you don't want to retricted the view to any Content Type?
view_register_for.required = True
view_register_for.default = *
view_register_for.choices = *|Document|Folder|Collection|Event|News Item
view_register_for.choices_delimiter = |

[template]
pre_render = bobtemplates.plone.content_type_with_view:prepare_renderer
post_render = bobtemplates.plone.content_type_with_view:post_renderer
post_ask = bobtemplates.plone.base:set_global_vars
